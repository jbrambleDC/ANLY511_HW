Problem 3

> x <- rgeom(10,.3)
> print(sd(x))
[1] 1.646545
> print(sqrt(1-.3)/.3)
[1] 2.788867
> x <- rgeom(100,.3)
> print(sd(x))
[1] 2.480713
> x <- rgeom(200,.3)
> print(sd(x))
[1] 2.86963
> x <- rgeom(200,.5)
> print(sd(x))
[1] 1.499883
> print(sqrt(1-.5)/.5)
[1] 1.414214
> ##Notice How as the sample size of Rgeom gets bigger, the stdev converges to sqrt(1-p)/p
> x <- rgeom(200,.7)
> print(sd(x))
[1] 0.9239281
> print(sqrt(1-.7)/.7)
[1] 0.7824608
> x <- rgeom(400,.7)
> print(sd(x))
[1] 0.7220133
> ##with a sufficient sample size this convegance becomes more apparent
> ## lets try a number close to zero
> x <- rgeom(400,.001)
> print(sd(x))
[1] 997.6979
> print(sqrt(1-.001)/.001)
[1] 999.4999
> ##pretty solid convergence! How about a number close to 1
> x <- rgeom(400,.99)
> print(sd(x))
[1] 0.08638522
> print(sqrt(1-.99)/.99)
[1] 0.1010101
> #lets write a function that does this
> simulate_geom = function(list_probs) {
+     for (i in list_probs){
+         x <- rgeom(400,i)
+         sdx <- sd(x)
+         est_sd <- sqrt(1-i)/i
+         print(sdx)
+         print(est_sd)
+     }
+ }
> x = list(.3, .001, .99, .7, .5)
> simulate_geom(x)
[1] 2.976112
[1] 2.788867
[1] 970.2291
[1] 999.4999
[1] 0.07062201
[1] 0.1010101
[1] 0.8369745
[1] 0.7824608
[1] 1.329056
[1] 1.414214
> ###  look at each pair of numbers output above. We can see that they are relatively close. We could seperate these and calculate mean square error.
